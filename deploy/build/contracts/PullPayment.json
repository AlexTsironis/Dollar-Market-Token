{
  "contractName": "PullPayment",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "payee",
          "type": "address"
        }
      ],
      "name": "withdrawPayments",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dest",
          "type": "address"
        }
      ],
      "name": "payments",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dest\",\"type\":\"address\"}],\"name\":\"payments\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"payee\",\"type\":\"address\"}],\"name\":\"withdrawPayments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.\",\"kind\":\"dev\",\"methods\":{\"payments(address)\":{\"details\":\"Returns the payments owed to an address.\",\"params\":{\"dest\":\"The creditor's address.\"}},\"withdrawPayments(address)\":{\"details\":\"Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.\",\"params\":{\"payee\":\"Whose payments will be withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/openzeppelin-contracts-master/contracts/security/PullPayment.sol\":\"PullPayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/openzeppelin-contracts-master/contracts/access/Ownable.sol\":{\"keccak256\":\"0xa6f2be28404e8f1c7490b55ca772b22e2b4ba82beb2148d8bdf24785e02485cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://50e704dbe12ffe90b0a5ebbaa58c844bc491bb9bafc24d2168e0cb38fb775175\",\"dweb:/ipfs/QmVcc8xvfRnqNbnZB8iHZgnBiqo6mkAD8F8iGYPLWiTqGr\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/security/PullPayment.sol\":{\"keccak256\":\"0xd0439e6e8e904dab938d773c1892f93395f43d845876bf6c1427e6e4cdd85535\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6d47f444c11206df456d3062271279447021f593cfe2efb1680aba7d6434f138\",\"dweb:/ipfs/QmYQKsMN52pnJji4i6CtM3t45ZcDdh2hR3HwDHjyNutyWR\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/utils/Address.sol\":{\"keccak256\":\"0x2c035598c90ecd26c00f2b73207b4b4d52e3c46484f6e1380e4f9bb4a43cabc7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b04637146b14ae894c047c0dbd933c3ebf76898cd895aa881f5ea4d5db337da2\",\"dweb:/ipfs/QmZE73N5EvuAch1CX88DePfCgmwjLvKSaFEunjy5UoAuU9\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/utils/Context.sol\":{\"keccak256\":\"0x681ab5b6cd77464aec17a8fefa55d054f2cfd9a1f5b5de5be1f13a9cdf83bd28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0040db56603a9105a1b5571f3ef8cc700068930125675065816dc83bfdc459fb\",\"dweb:/ipfs/QmaCJWcBpSwqhYHzCzE2Hg1zjQkaBp8S1git5shZaGJTe7\"]},\"project:/contracts/openzeppelin-contracts-master/contracts/utils/escrow/Escrow.sol\":{\"keccak256\":\"0xb7383cf59a34eec3e99a891510c5b865c1fab92f8666a968f004bfb524b0ab6f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://95698ff015a5875dae9907ed973e62ecdc298ec4f8372e2defa90b75f86a8522\",\"dweb:/ipfs/QmX4WEhDmhN8ZhLeDmjU6qeinppXcfe2Kzw6F9TEqtPUJQ\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/escrow/Escrow.sol\";\r\n\r\n/**\r\n * @dev Simple implementation of a\r\n * https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\r\n * strategy, where the paying contract doesn't interact directly with the\r\n * receiver account, which must withdraw its payments itself.\r\n *\r\n * Pull-payments are often considered the best practice when it comes to sending\r\n * Ether, security-wise. It prevents recipients from blocking execution, and\r\n * eliminates reentrancy concerns.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n *\r\n * To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\r\n * instead of Solidity's `transfer` function. Payees can query their due\r\n * payments with {payments}, and retrieve them with {withdrawPayments}.\r\n */\r\nabstract contract PullPayment {\r\n    Escrow private immutable _escrow;\r\n\r\n    constructor() {\r\n        _escrow = new Escrow();\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraw accumulated payments, forwarding all gas to the recipient.\r\n     *\r\n     * Note that _any_ account can call this function, not just the `payee`.\r\n     * This means that contracts unaware of the `PullPayment` protocol can still\r\n     * receive funds this way, by having a separate account call\r\n     * {withdrawPayments}.\r\n     *\r\n     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\r\n     * Make sure you trust the recipient, or are either following the\r\n     * checks-effects-interactions pattern or using {ReentrancyGuard}.\r\n     *\r\n     * @param payee Whose payments will be withdrawn.\r\n     */\r\n    function withdrawPayments(address payable payee) public virtual {\r\n        _escrow.withdraw(payee);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the payments owed to an address.\r\n     * @param dest The creditor's address.\r\n     */\r\n    function payments(address dest) public view returns (uint256) {\r\n        return _escrow.depositsOf(dest);\r\n    }\r\n\r\n    /**\r\n     * @dev Called by the payer to store the sent amount as credit to be pulled.\r\n     * Funds sent in this way are stored in an intermediate {Escrow} contract, so\r\n     * there is no danger of them being spent before withdrawal.\r\n     *\r\n     * @param dest The destination address of the funds.\r\n     * @param amount The amount to transfer.\r\n     */\r\n    function _asyncTransfer(address dest, uint256 amount) internal virtual {\r\n        _escrow.deposit{value: amount}(dest);\r\n    }\r\n}\r\n",
  "sourcePath": "/home/a/Desktop/pre/contracts/openzeppelin-contracts-master/contracts/security/PullPayment.sol",
  "ast": {
    "absolutePath": "project:/contracts/openzeppelin-contracts-master/contracts/security/PullPayment.sol",
    "exportedSymbols": {
      "Address": [
        18170
      ],
      "Context": [
        18276
      ],
      "Escrow": [
        19361
      ],
      "Ownable": [
        1367
      ],
      "PullPayment": [
        10027
      ]
    },
    "id": 10028,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 9966,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:102"
      },
      {
        "absolutePath": "project:/contracts/openzeppelin-contracts-master/contracts/utils/escrow/Escrow.sol",
        "file": "../utils/escrow/Escrow.sol",
        "id": 9967,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10028,
        "sourceUnit": 19362,
        "src": "62:36:102",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "PullPayment",
        "contractDependencies": [
          19361
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 9968,
          "nodeType": "StructuredDocumentation",
          "src": "102:966:102",
          "text": " @dev Simple implementation of a\n https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n strategy, where the paying contract doesn't interact directly with the\n receiver account, which must withdraw its payments itself.\n Pull-payments are often considered the best practice when it comes to sending\n Ether, security-wise. It prevents recipients from blocking execution, and\n eliminates reentrancy concerns.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n instead of Solidity's `transfer` function. Payees can query their due\n payments with {payments}, and retrieve them with {withdrawPayments}."
        },
        "fullyImplemented": true,
        "id": 10027,
        "linearizedBaseContracts": [
          10027
        ],
        "name": "PullPayment",
        "nameLocation": "1088:11:102",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 9971,
            "mutability": "immutable",
            "name": "_escrow",
            "nameLocation": "1132:7:102",
            "nodeType": "VariableDeclaration",
            "scope": 10027,
            "src": "1107:32:102",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$19361",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "id": 9970,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 9969,
                "name": "Escrow",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 19361,
                "src": "1107:6:102"
              },
              "referencedDeclaration": 19361,
              "src": "1107:6:102",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$19361",
                "typeString": "contract Escrow"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 9981,
              "nodeType": "Block",
              "src": "1162:41:102",
              "statements": [
                {
                  "expression": {
                    "id": 9979,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 9974,
                      "name": "_escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9971,
                      "src": "1173:7:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$19361",
                        "typeString": "contract Escrow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9977,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1183:10:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$19361_$",
                          "typeString": "function () returns (contract Escrow)"
                        },
                        "typeName": {
                          "id": 9976,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 9975,
                            "name": "Escrow",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 19361,
                            "src": "1187:6:102"
                          },
                          "referencedDeclaration": 19361,
                          "src": "1187:6:102",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$19361",
                            "typeString": "contract Escrow"
                          }
                        }
                      },
                      "id": 9978,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1183:12:102",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$19361",
                        "typeString": "contract Escrow"
                      }
                    },
                    "src": "1173:22:102",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Escrow_$19361",
                      "typeString": "contract Escrow"
                    }
                  },
                  "id": 9980,
                  "nodeType": "ExpressionStatement",
                  "src": "1173:22:102"
                }
              ]
            },
            "id": 9982,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9972,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1159:2:102"
            },
            "returnParameters": {
              "id": 9973,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1162:0:102"
            },
            "scope": 10027,
            "src": "1148:55:102",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 9994,
              "nodeType": "Block",
              "src": "1932:42:102",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 9991,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9985,
                        "src": "1960:5:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 9988,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9971,
                        "src": "1943:7:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$19361",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 9990,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 19360,
                      "src": "1943:16:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 9992,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1943:23:102",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9993,
                  "nodeType": "ExpressionStatement",
                  "src": "1943:23:102"
                }
              ]
            },
            "documentation": {
              "id": 9983,
              "nodeType": "StructuredDocumentation",
              "src": "1211:651:102",
              "text": " @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n Note that _any_ account can call this function, not just the `payee`.\n This means that contracts unaware of the `PullPayment` protocol can still\n receive funds this way, by having a separate account call\n {withdrawPayments}.\n WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n Make sure you trust the recipient, or are either following the\n checks-effects-interactions pattern or using {ReentrancyGuard}.\n @param payee Whose payments will be withdrawn."
            },
            "functionSelector": "31b3eb94",
            "id": 9995,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nameLocation": "1877:16:102",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9986,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9985,
                  "mutability": "mutable",
                  "name": "payee",
                  "nameLocation": "1910:5:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 9995,
                  "src": "1894:21:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 9984,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1894:15:102",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1893:23:102"
            },
            "returnParameters": {
              "id": 9987,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1932:0:102"
            },
            "scope": 10027,
            "src": "1868:106:102",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10008,
              "nodeType": "Block",
              "src": "2160:50:102",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 10005,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9998,
                        "src": "2197:4:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 10003,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9971,
                        "src": "2178:7:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$19361",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 10004,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 19303,
                      "src": "2178:18:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 10006,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2178:24:102",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 10002,
                  "id": 10007,
                  "nodeType": "Return",
                  "src": "2171:31:102"
                }
              ]
            },
            "documentation": {
              "id": 9996,
              "nodeType": "StructuredDocumentation",
              "src": "1982:110:102",
              "text": " @dev Returns the payments owed to an address.\n @param dest The creditor's address."
            },
            "functionSelector": "e2982c21",
            "id": 10009,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nameLocation": "2107:8:102",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9998,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2124:4:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 10009,
                  "src": "2116:12:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9997,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2116:7:102",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2115:14:102"
            },
            "returnParameters": {
              "id": 10002,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10001,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10009,
                  "src": "2151:7:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10000,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2151:7:102",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2150:9:102"
            },
            "scope": 10027,
            "src": "2098:112:102",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10025,
              "nodeType": "Block",
              "src": "2650:55:102",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 10022,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10012,
                        "src": "2692:4:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 10017,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9971,
                          "src": "2661:7:102",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$19361",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 10019,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 19328,
                        "src": "2661:15:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                          "typeString": "function (address) payable external"
                        }
                      },
                      "id": 10021,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 10020,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10014,
                          "src": "2684:6:102",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "2661:30:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 10023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2661:36:102",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10024,
                  "nodeType": "ExpressionStatement",
                  "src": "2661:36:102"
                }
              ]
            },
            "documentation": {
              "id": 10010,
              "nodeType": "StructuredDocumentation",
              "src": "2218:355:102",
              "text": " @dev Called by the payer to store the sent amount as credit to be pulled.\n Funds sent in this way are stored in an intermediate {Escrow} contract, so\n there is no danger of them being spent before withdrawal.\n @param dest The destination address of the funds.\n @param amount The amount to transfer."
            },
            "id": 10026,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nameLocation": "2588:14:102",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10015,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10012,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2611:4:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 10026,
                  "src": "2603:12:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10011,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2603:7:102",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10014,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2625:6:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 10026,
                  "src": "2617:14:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10013,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2617:7:102",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2602:30:102"
            },
            "returnParameters": {
              "id": 10016,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2650:0:102"
            },
            "scope": 10027,
            "src": "2579:126:102",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 10028,
        "src": "1070:1638:102",
        "usedErrors": []
      }
    ],
    "src": "35:2675:102"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/openzeppelin-contracts-master/contracts/security/PullPayment.sol",
    "exportedSymbols": {
      "Address": [
        18170
      ],
      "Context": [
        18276
      ],
      "Escrow": [
        19361
      ],
      "Ownable": [
        1367
      ],
      "PullPayment": [
        10027
      ]
    },
    "id": 10028,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 9966,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "35:23:102"
      },
      {
        "absolutePath": "project:/contracts/openzeppelin-contracts-master/contracts/utils/escrow/Escrow.sol",
        "file": "../utils/escrow/Escrow.sol",
        "id": 9967,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10028,
        "sourceUnit": 19362,
        "src": "62:36:102",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [],
        "canonicalName": "PullPayment",
        "contractDependencies": [
          19361
        ],
        "contractKind": "contract",
        "documentation": {
          "id": 9968,
          "nodeType": "StructuredDocumentation",
          "src": "102:966:102",
          "text": " @dev Simple implementation of a\n https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment]\n strategy, where the paying contract doesn't interact directly with the\n receiver account, which must withdraw its payments itself.\n Pull-payments are often considered the best practice when it comes to sending\n Ether, security-wise. It prevents recipients from blocking execution, and\n eliminates reentrancy concerns.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n To use, derive from the `PullPayment` contract, and use {_asyncTransfer}\n instead of Solidity's `transfer` function. Payees can query their due\n payments with {payments}, and retrieve them with {withdrawPayments}."
        },
        "fullyImplemented": true,
        "id": 10027,
        "linearizedBaseContracts": [
          10027
        ],
        "name": "PullPayment",
        "nameLocation": "1088:11:102",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "id": 9971,
            "mutability": "immutable",
            "name": "_escrow",
            "nameLocation": "1132:7:102",
            "nodeType": "VariableDeclaration",
            "scope": 10027,
            "src": "1107:32:102",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_Escrow_$19361",
              "typeString": "contract Escrow"
            },
            "typeName": {
              "id": 9970,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 9969,
                "name": "Escrow",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 19361,
                "src": "1107:6:102"
              },
              "referencedDeclaration": 19361,
              "src": "1107:6:102",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_Escrow_$19361",
                "typeString": "contract Escrow"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 9981,
              "nodeType": "Block",
              "src": "1162:41:102",
              "statements": [
                {
                  "expression": {
                    "id": 9979,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 9974,
                      "name": "_escrow",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 9971,
                      "src": "1173:7:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$19361",
                        "typeString": "contract Escrow"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 9977,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "NewExpression",
                        "src": "1183:10:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Escrow_$19361_$",
                          "typeString": "function () returns (contract Escrow)"
                        },
                        "typeName": {
                          "id": 9976,
                          "nodeType": "UserDefinedTypeName",
                          "pathNode": {
                            "id": 9975,
                            "name": "Escrow",
                            "nodeType": "IdentifierPath",
                            "referencedDeclaration": 19361,
                            "src": "1187:6:102"
                          },
                          "referencedDeclaration": 19361,
                          "src": "1187:6:102",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$19361",
                            "typeString": "contract Escrow"
                          }
                        }
                      },
                      "id": 9978,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1183:12:102",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_Escrow_$19361",
                        "typeString": "contract Escrow"
                      }
                    },
                    "src": "1173:22:102",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Escrow_$19361",
                      "typeString": "contract Escrow"
                    }
                  },
                  "id": 9980,
                  "nodeType": "ExpressionStatement",
                  "src": "1173:22:102"
                }
              ]
            },
            "id": 9982,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9972,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1159:2:102"
            },
            "returnParameters": {
              "id": 9973,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1162:0:102"
            },
            "scope": 10027,
            "src": "1148:55:102",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 9994,
              "nodeType": "Block",
              "src": "1932:42:102",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 9991,
                        "name": "payee",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9985,
                        "src": "1960:5:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address_payable",
                          "typeString": "address payable"
                        }
                      ],
                      "expression": {
                        "id": 9988,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9971,
                        "src": "1943:7:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$19361",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 9990,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "withdraw",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 19360,
                      "src": "1943:16:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_nonpayable$_t_address_payable_$returns$__$",
                        "typeString": "function (address payable) external"
                      }
                    },
                    "id": 9992,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1943:23:102",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 9993,
                  "nodeType": "ExpressionStatement",
                  "src": "1943:23:102"
                }
              ]
            },
            "documentation": {
              "id": 9983,
              "nodeType": "StructuredDocumentation",
              "src": "1211:651:102",
              "text": " @dev Withdraw accumulated payments, forwarding all gas to the recipient.\n Note that _any_ account can call this function, not just the `payee`.\n This means that contracts unaware of the `PullPayment` protocol can still\n receive funds this way, by having a separate account call\n {withdrawPayments}.\n WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n Make sure you trust the recipient, or are either following the\n checks-effects-interactions pattern or using {ReentrancyGuard}.\n @param payee Whose payments will be withdrawn."
            },
            "functionSelector": "31b3eb94",
            "id": 9995,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "withdrawPayments",
            "nameLocation": "1877:16:102",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9986,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9985,
                  "mutability": "mutable",
                  "name": "payee",
                  "nameLocation": "1910:5:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 9995,
                  "src": "1894:21:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address_payable",
                    "typeString": "address payable"
                  },
                  "typeName": {
                    "id": 9984,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1894:15:102",
                    "stateMutability": "payable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address_payable",
                      "typeString": "address payable"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1893:23:102"
            },
            "returnParameters": {
              "id": 9987,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1932:0:102"
            },
            "scope": 10027,
            "src": "1868:106:102",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10008,
              "nodeType": "Block",
              "src": "2160:50:102",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 10005,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9998,
                        "src": "2197:4:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 10003,
                        "name": "_escrow",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9971,
                        "src": "2178:7:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_Escrow_$19361",
                          "typeString": "contract Escrow"
                        }
                      },
                      "id": 10004,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "depositsOf",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 19303,
                      "src": "2178:18:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                        "typeString": "function (address) view external returns (uint256)"
                      }
                    },
                    "id": 10006,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2178:24:102",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "functionReturnParameters": 10002,
                  "id": 10007,
                  "nodeType": "Return",
                  "src": "2171:31:102"
                }
              ]
            },
            "documentation": {
              "id": 9996,
              "nodeType": "StructuredDocumentation",
              "src": "1982:110:102",
              "text": " @dev Returns the payments owed to an address.\n @param dest The creditor's address."
            },
            "functionSelector": "e2982c21",
            "id": 10009,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "payments",
            "nameLocation": "2107:8:102",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 9999,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 9998,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2124:4:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 10009,
                  "src": "2116:12:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 9997,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2116:7:102",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2115:14:102"
            },
            "returnParameters": {
              "id": 10002,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10001,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10009,
                  "src": "2151:7:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10000,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2151:7:102",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2150:9:102"
            },
            "scope": 10027,
            "src": "2098:112:102",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 10025,
              "nodeType": "Block",
              "src": "2650:55:102",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 10022,
                        "name": "dest",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 10012,
                        "src": "2692:4:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "expression": {
                          "id": 10017,
                          "name": "_escrow",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9971,
                          "src": "2661:7:102",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Escrow_$19361",
                            "typeString": "contract Escrow"
                          }
                        },
                        "id": 10019,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "deposit",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 19328,
                        "src": "2661:15:102",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$",
                          "typeString": "function (address) payable external"
                        }
                      },
                      "id": 10021,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "names": [
                        "value"
                      ],
                      "nodeType": "FunctionCallOptions",
                      "options": [
                        {
                          "id": 10020,
                          "name": "amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 10014,
                          "src": "2684:6:102",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        }
                      ],
                      "src": "2661:30:102",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_payable$_t_address_$returns$__$value",
                        "typeString": "function (address) payable external"
                      }
                    },
                    "id": 10023,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "2661:36:102",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 10024,
                  "nodeType": "ExpressionStatement",
                  "src": "2661:36:102"
                }
              ]
            },
            "documentation": {
              "id": 10010,
              "nodeType": "StructuredDocumentation",
              "src": "2218:355:102",
              "text": " @dev Called by the payer to store the sent amount as credit to be pulled.\n Funds sent in this way are stored in an intermediate {Escrow} contract, so\n there is no danger of them being spent before withdrawal.\n @param dest The destination address of the funds.\n @param amount The amount to transfer."
            },
            "id": 10026,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_asyncTransfer",
            "nameLocation": "2588:14:102",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10015,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10012,
                  "mutability": "mutable",
                  "name": "dest",
                  "nameLocation": "2611:4:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 10026,
                  "src": "2603:12:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10011,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2603:7:102",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10014,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "2625:6:102",
                  "nodeType": "VariableDeclaration",
                  "scope": 10026,
                  "src": "2617:14:102",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 10013,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "2617:7:102",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2602:30:102"
            },
            "returnParameters": {
              "id": 10016,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2650:0:102"
            },
            "scope": 10027,
            "src": "2579:126:102",
            "stateMutability": "nonpayable",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 10028,
        "src": "1070:1638:102",
        "usedErrors": []
      }
    ],
    "src": "35:2675:102"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.10+commit.fc410830.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.3",
  "updatedAt": "2021-12-13T12:22:07.308Z",
  "devdoc": {
    "details": "Simple implementation of a https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls[pull-payment] strategy, where the paying contract doesn't interact directly with the receiver account, which must withdraw its payments itself. Pull-payments are often considered the best practice when it comes to sending Ether, security-wise. It prevents recipients from blocking execution, and eliminates reentrancy concerns. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. To use, derive from the `PullPayment` contract, and use {_asyncTransfer} instead of Solidity's `transfer` function. Payees can query their due payments with {payments}, and retrieve them with {withdrawPayments}.",
    "kind": "dev",
    "methods": {
      "payments(address)": {
        "details": "Returns the payments owed to an address.",
        "params": {
          "dest": "The creditor's address."
        }
      },
      "withdrawPayments(address)": {
        "details": "Withdraw accumulated payments, forwarding all gas to the recipient. Note that _any_ account can call this function, not just the `payee`. This means that contracts unaware of the `PullPayment` protocol can still receive funds this way, by having a separate account call {withdrawPayments}. WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities. Make sure you trust the recipient, or are either following the checks-effects-interactions pattern or using {ReentrancyGuard}.",
        "params": {
          "payee": "Whose payments will be withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}